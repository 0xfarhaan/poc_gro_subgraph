// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogExit extends ethereum.Event {
  get params(): LogExit__Params {
    return new LogExit__Params(this);
  }
}

export class LogExit__Params {
  _event: LogExit;

  constructor(event: LogExit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalLockedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get unlocked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogExtend extends ethereum.Event {
  get params(): LogExtend__Params {
    return new LogExtend__Params(this);
  }
}

export class LogExtend__Params {
  _event: LogExtend;

  constructor(event: LogExtend) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newVesting(): LogExtendNewVestingStruct {
    return changetype<LogExtendNewVestingStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class LogExtendNewVestingStruct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }
}

export class LogInstantExit extends ethereum.Event {
  get params(): LogInstantExit__Params {
    return new LogInstantExit__Params(this);
  }
}

export class LogInstantExit__Params {
  _event: LogInstantExit;

  constructor(event: LogInstantExit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintingAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogMaxLockPeriod extends ethereum.Event {
  get params(): LogMaxLockPeriod__Params {
    return new LogMaxLockPeriod__Params(this);
  }
}

export class LogMaxLockPeriod__Params {
  _event: LogMaxLockPeriod;

  constructor(event: LogMaxLockPeriod) {
    this._event = event;
  }

  get newMaxPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogMigrate extends ethereum.Event {
  get params(): LogMigrate__Params {
    return new LogMigrate__Params(this);
  }
}

export class LogMigrate__Params {
  _event: LogMigrate;

  constructor(event: LogMigrate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vesting(): LogMigrateVestingStruct {
    return changetype<LogMigrateVestingStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class LogMigrateVestingStruct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }
}

export class LogNewBonusContract extends ethereum.Event {
  get params(): LogNewBonusContract__Params {
    return new LogNewBonusContract__Params(this);
  }
}

export class LogNewBonusContract__Params {
  _event: LogNewBonusContract;

  constructor(event: LogNewBonusContract) {
    this._event = event;
  }

  get bonusContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogNewDistributer extends ethereum.Event {
  get params(): LogNewDistributer__Params {
    return new LogNewDistributer__Params(this);
  }
}

export class LogNewDistributer__Params {
  _event: LogNewDistributer;

  constructor(event: LogNewDistributer) {
    this._event = event;
  }

  get newDistributer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogNewInitUnlockedPercent extends ethereum.Event {
  get params(): LogNewInitUnlockedPercent__Params {
    return new LogNewInitUnlockedPercent__Params(this);
  }
}

export class LogNewInitUnlockedPercent__Params {
  _event: LogNewInitUnlockedPercent;

  constructor(event: LogNewInitUnlockedPercent) {
    this._event = event;
  }

  get initUnlockedPercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogNewInstantUnlockedPercent extends ethereum.Event {
  get params(): LogNewInstantUnlockedPercent__Params {
    return new LogNewInstantUnlockedPercent__Params(this);
  }
}

export class LogNewInstantUnlockedPercent__Params {
  _event: LogNewInstantUnlockedPercent;

  constructor(event: LogNewInstantUnlockedPercent) {
    this._event = event;
  }

  get instantUnlockPercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogNewMigrator extends ethereum.Event {
  get params(): LogNewMigrator__Params {
    return new LogNewMigrator__Params(this);
  }
}

export class LogNewMigrator__Params {
  _event: LogNewMigrator;

  constructor(event: LogNewMigrator) {
    this._event = event;
  }

  get newMigrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetStatus extends ethereum.Event {
  get params(): LogSetStatus__Params {
    return new LogSetStatus__Params(this);
  }
}

export class LogSetStatus__Params {
  _event: LogSetStatus;

  constructor(event: LogSetStatus) {
    this._event = event;
  }

  get pause(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LogVest extends ethereum.Event {
  get params(): LogVest__Params {
    return new LogVest__Params(this);
  }
}

export class LogVest__Params {
  _event: LogVest;

  constructor(event: LogVest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalLockedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vesting(): LogVestVestingStruct {
    return changetype<LogVestVestingStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class LogVestVestingStruct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }
}

export class LogVester extends ethereum.Event {
  get params(): LogVester__Params {
    return new LogVester__Params(this);
  }
}

export class LogVester__Params {
  _event: LogVester;

  constructor(event: LogVester) {
    this._event = event;
  }

  get vester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GROVesting__accountInfosResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotal(): BigInt {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }
}

export class GROVesting__calcPartialExitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GROVesting__getVestingDatesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GROVesting extends ethereum.SmartContract {
  static bind(address: Address): GROVesting {
    return new GROVesting("GROVesting", address);
  }

  PERCENTAGE_DECIMAL_FACTOR(): BigInt {
    let result = super.call(
      "PERCENTAGE_DECIMAL_FACTOR",
      "PERCENTAGE_DECIMAL_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENTAGE_DECIMAL_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENTAGE_DECIMAL_FACTOR",
      "PERCENTAGE_DECIMAL_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TIME_LOCK(): Address {
    let result = super.call("TIME_LOCK", "TIME_LOCK():(address)", []);

    return result[0].toAddress();
  }

  try_TIME_LOCK(): ethereum.CallResult<Address> {
    let result = super.tryCall("TIME_LOCK", "TIME_LOCK():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountInfos(param0: Address): GROVesting__accountInfosResult {
    let result = super.call(
      "accountInfos",
      "accountInfos(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GROVesting__accountInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_accountInfos(
    param0: Address
  ): ethereum.CallResult<GROVesting__accountInfosResult> {
    let result = super.tryCall(
      "accountInfos",
      "accountInfos(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GROVesting__accountInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcPartialExit(
    account: Address,
    amount: BigInt
  ): GROVesting__calcPartialExitResult {
    let result = super.call(
      "calcPartialExit",
      "calcPartialExit(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new GROVesting__calcPartialExitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcPartialExit(
    account: Address,
    amount: BigInt
  ): ethereum.CallResult<GROVesting__calcPartialExitResult> {
    let result = super.tryCall(
      "calcPartialExit",
      "calcPartialExit(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GROVesting__calcPartialExitResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  distributer(): Address {
    let result = super.call("distributer", "distributer():(address)", []);

    return result[0].toAddress();
  }

  try_distributer(): ethereum.CallResult<Address> {
    let result = super.tryCall("distributer", "distributer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVestingDates(account: Address): GROVesting__getVestingDatesResult {
    let result = super.call(
      "getVestingDates",
      "getVestingDates(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new GROVesting__getVestingDatesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVestingDates(
    account: Address
  ): ethereum.CallResult<GROVesting__getVestingDatesResult> {
    let result = super.tryCall(
      "getVestingDates",
      "getVestingDates(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GROVesting__getVestingDatesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  globalStartTime(): BigInt {
    let result = super.call(
      "globalStartTime",
      "globalStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_globalStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "globalStartTime",
      "globalStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hodlerClaims(): Address {
    let result = super.call("hodlerClaims", "hodlerClaims():(address)", []);

    return result[0].toAddress();
  }

  try_hodlerClaims(): ethereum.CallResult<Address> {
    let result = super.tryCall("hodlerClaims", "hodlerClaims():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initUnlockedPercent(): BigInt {
    let result = super.call(
      "initUnlockedPercent",
      "initUnlockedPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initUnlockedPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initUnlockedPercent",
      "initUnlockedPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  instantUnlockPercent(): BigInt {
    let result = super.call(
      "instantUnlockPercent",
      "instantUnlockPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_instantUnlockPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "instantUnlockPercent",
      "instantUnlockPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockPeriodFactor(): BigInt {
    let result = super.call(
      "lockPeriodFactor",
      "lockPeriodFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lockPeriodFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockPeriodFactor",
      "lockPeriodFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLockPeriod(): BigInt {
    let result = super.call("maxLockPeriod", "maxLockPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLockPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLockPeriod",
      "maxLockPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oldVesting(): Address {
    let result = super.call("oldVesting", "oldVesting():(address)", []);

    return result[0].toAddress();
  }

  try_oldVesting(): ethereum.CallResult<Address> {
    let result = super.tryCall("oldVesting", "oldVesting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalBalance(account: Address): BigInt {
    let result = super.call("totalBalance", "totalBalance(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_totalBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalance",
      "totalBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalGroove(): BigInt {
    let result = super.call("totalGroove", "totalGroove():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalGroove(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalGroove", "totalGroove():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLockedAmount(): BigInt {
    let result = super.call(
      "totalLockedAmount",
      "totalLockedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLockedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLockedAmount",
      "totalLockedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawn(account: Address): BigInt {
    let result = super.call(
      "totalWithdrawn",
      "totalWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawn(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawn",
      "totalWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userMigrated(param0: Address): boolean {
    let result = super.call("userMigrated", "userMigrated(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_userMigrated(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("userMigrated", "userMigrated(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vestedBalance(account: Address): BigInt {
    let result = super.call(
      "vestedBalance",
      "vestedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_vestedBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestedBalance",
      "vestedBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vesters(param0: Address): boolean {
    let result = super.call("vesters", "vesters(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_vesters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("vesters", "vesters(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vestingBalance(account: Address): BigInt {
    let result = super.call(
      "vestingBalance",
      "vestingBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_vestingBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingBalance",
      "vestingBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawals(param0: Address): BigInt {
    let result = super.call("withdrawals", "withdrawals(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawals",
      "withdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _oldVesting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get timeLock(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExtendCall extends ethereum.Call {
  get inputs(): ExtendCall__Inputs {
    return new ExtendCall__Inputs(this);
  }

  get outputs(): ExtendCall__Outputs {
    return new ExtendCall__Outputs(this);
  }
}

export class ExtendCall__Inputs {
  _call: ExtendCall;

  constructor(call: ExtendCall) {
    this._call = call;
  }

  get extension(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExtendCall__Outputs {
  _call: ExtendCall;

  constructor(call: ExtendCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDistributerCall extends ethereum.Call {
  get inputs(): SetDistributerCall__Inputs {
    return new SetDistributerCall__Inputs(this);
  }

  get outputs(): SetDistributerCall__Outputs {
    return new SetDistributerCall__Outputs(this);
  }
}

export class SetDistributerCall__Inputs {
  _call: SetDistributerCall;

  constructor(call: SetDistributerCall) {
    this._call = call;
  }

  get _distributer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDistributerCall__Outputs {
  _call: SetDistributerCall;

  constructor(call: SetDistributerCall) {
    this._call = call;
  }
}

export class SetHodlerClaimsCall extends ethereum.Call {
  get inputs(): SetHodlerClaimsCall__Inputs {
    return new SetHodlerClaimsCall__Inputs(this);
  }

  get outputs(): SetHodlerClaimsCall__Outputs {
    return new SetHodlerClaimsCall__Outputs(this);
  }
}

export class SetHodlerClaimsCall__Inputs {
  _call: SetHodlerClaimsCall;

  constructor(call: SetHodlerClaimsCall) {
    this._call = call;
  }

  get _hodlerClaims(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHodlerClaimsCall__Outputs {
  _call: SetHodlerClaimsCall;

  constructor(call: SetHodlerClaimsCall) {
    this._call = call;
  }
}

export class SetInitUnlockedPercentCall extends ethereum.Call {
  get inputs(): SetInitUnlockedPercentCall__Inputs {
    return new SetInitUnlockedPercentCall__Inputs(this);
  }

  get outputs(): SetInitUnlockedPercentCall__Outputs {
    return new SetInitUnlockedPercentCall__Outputs(this);
  }
}

export class SetInitUnlockedPercentCall__Inputs {
  _call: SetInitUnlockedPercentCall;

  constructor(call: SetInitUnlockedPercentCall) {
    this._call = call;
  }

  get _initUnlockedPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInitUnlockedPercentCall__Outputs {
  _call: SetInitUnlockedPercentCall;

  constructor(call: SetInitUnlockedPercentCall) {
    this._call = call;
  }
}

export class SetInstantUnlockedPercentCall extends ethereum.Call {
  get inputs(): SetInstantUnlockedPercentCall__Inputs {
    return new SetInstantUnlockedPercentCall__Inputs(this);
  }

  get outputs(): SetInstantUnlockedPercentCall__Outputs {
    return new SetInstantUnlockedPercentCall__Outputs(this);
  }
}

export class SetInstantUnlockedPercentCall__Inputs {
  _call: SetInstantUnlockedPercentCall;

  constructor(call: SetInstantUnlockedPercentCall) {
    this._call = call;
  }

  get _instantUnlockPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInstantUnlockedPercentCall__Outputs {
  _call: SetInstantUnlockedPercentCall;

  constructor(call: SetInstantUnlockedPercentCall) {
    this._call = call;
  }
}

export class SetMaxLockPeriodCall extends ethereum.Call {
  get inputs(): SetMaxLockPeriodCall__Inputs {
    return new SetMaxLockPeriodCall__Inputs(this);
  }

  get outputs(): SetMaxLockPeriodCall__Outputs {
    return new SetMaxLockPeriodCall__Outputs(this);
  }
}

export class SetMaxLockPeriodCall__Inputs {
  _call: SetMaxLockPeriodCall;

  constructor(call: SetMaxLockPeriodCall) {
    this._call = call;
  }

  get maxPeriodFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLockPeriodCall__Outputs {
  _call: SetMaxLockPeriodCall;

  constructor(call: SetMaxLockPeriodCall) {
    this._call = call;
  }
}

export class SetStatusCall extends ethereum.Call {
  get inputs(): SetStatusCall__Inputs {
    return new SetStatusCall__Inputs(this);
  }

  get outputs(): SetStatusCall__Outputs {
    return new SetStatusCall__Outputs(this);
  }
}

export class SetStatusCall__Inputs {
  _call: SetStatusCall;

  constructor(call: SetStatusCall) {
    this._call = call;
  }

  get pause(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStatusCall__Outputs {
  _call: SetStatusCall;

  constructor(call: SetStatusCall) {
    this._call = call;
  }
}

export class SetVesterCall extends ethereum.Call {
  get inputs(): SetVesterCall__Inputs {
    return new SetVesterCall__Inputs(this);
  }

  get outputs(): SetVesterCall__Outputs {
    return new SetVesterCall__Outputs(this);
  }
}

export class SetVesterCall__Inputs {
  _call: SetVesterCall;

  constructor(call: SetVesterCall) {
    this._call = call;
  }

  get vester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetVesterCall__Outputs {
  _call: SetVesterCall;

  constructor(call: SetVesterCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VestCall extends ethereum.Call {
  get inputs(): VestCall__Inputs {
    return new VestCall__Inputs(this);
  }

  get outputs(): VestCall__Outputs {
    return new VestCall__Outputs(this);
  }
}

export class VestCall__Inputs {
  _call: VestCall;

  constructor(call: VestCall) {
    this._call = call;
  }

  get vest(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class VestCall__Outputs {
  _call: VestCall;

  constructor(call: VestCall) {
    this._call = call;
  }
}
